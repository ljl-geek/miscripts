db-iops


Should use sar for check tps

There are two failure cases for this check

1) On RHEL 5, the script checks a /tmp file generated by a cron job, and the cron fails silently.  The check has no way to exit with anything but "OK" (no way to be critical - badly written nagios check)

[ljl@admin3 libexec]$ more check_iops.sh
#!/bin/bash
if [ -f "/tmp/iops.txt" ]
then
s=$(tail -n1 /tmp/iops.txt)
echo "OK - ${s} iops | iops=${s};;;;;;;;"
fi
exit 0

This script will always be ok, unless the nrpe daemon is down

2) On RHEL 6, the check is a different python script that is too involved and "clever".  It does not allow for the use case where sar returns the result for more than just one device that doesn't match /sys/block/sd*/dev, specifically an encrypted drive, so the script returns an error on the command line, making nrpe reject it
[ljl@shard82a ~]$ /usr/local/libexec/nagios_check_tps
Traceback (most recent call last):
  File "/usr/local/libexec/nagios_check_tps", line 29, in <module>
    tpsEntries = get_tps_entries(diskInfo)
  File "/usr/local/libexec/nagios_check_tps", line 18, in get_tps_entries
    tps[diskInfo[int(disk)]] = float(row[3])
KeyError: 253
[ljl@shard82a ~]$ df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/sda3            2303077340 236638748 1949448948  11% /
tmpfs                 49509412         4  49509408   1% /dev/shm
/dev/sda1                99150     31891     62139  34% /boot
/dev/mapper/encrypted
                      33027952    465928  30884304   2% /encrypted
[ljl@shard82a ~]$ more /sys/block/sd*/dev
8:0
===============
#!/bin/bash
#defaults
warnd="1000"
critd="1500"

# getops define them here, and put in usage
while getopts "w:c:h" OPT; do
    case "$OPT" in
        w) warn="$OPTARG" ;;
        c) crit="$OPTARG" ;;
        h) usage
           exit 3                                     ;;
        *) echo "Unrecognized option: $OPT" >&2
           echo >&2
           usage
           exit 3                                   ;;
    esac
done

if [[ x$warn -eq x"" ]]
then
    	warn=$warnd
fi

if [[ x$crit -eq x"" ]]
then
    	crit=$critd
fi

# get time to look at
ago=$(date -d @$(expr $(date "+%s") - 1200) "+%T" )

# get the number
out=$(sar -s $ago -b | grep -v verage | tail -1 | awk '{ print $3 }')

# filter the critical
if (( $(/usr/bin/bc <<< "$out >= $crit") == 1 ))
then
   echo "CRITICAL: TPS=$out"
   exit 2
fi
# filter the warning
if (( $(/usr/bin/bc <<< "$out >= $warn") == 1 ))
then
   echo "WARNING: TPS=$out"
   exit 1
fi

# if it is ok say so and exit
if (( $(/usr/bin/bc <<< "$out < $warn") == 1 ))
then
   echo "OK: TPS=$out"
   exit 0
fi

#If we get here, something is whacked, so give an unknown
echo "UNKNOWN: Something went wrong with $0, doesn't return a valid value for TPS"
exit 3

